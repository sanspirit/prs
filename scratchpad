{
    "protocols": [
        "5.0"
    ],
    "os": "windows",
    "arch": "amd64",
    "filename": "terraform-provider-azurerm_3.75.0_windows_amd64.zip",
    "download_url": "https://releases.hashicorp.com/terraform-provider-azurerm/3.75.0/terraform-provider-azurerm_3.75.0_windows_amd64.zip",
    "shasums_url": "https://releases.hashicorp.com/terraform-provider-azurerm/3.75.0/terraform-provider-azurerm_3.75.0_SHA256SUMS",
    "shasums_signature_url": "https://releases.hashicorp.com/terraform-provider-azurerm/3.75.0/terraform-provider-azurerm_3.75.0_SHA256SUMS.72D7468F.sig",
    "shasum": "547eab553ea24cc9079fd80093c1611d036df089385bb4a38c5db21f6126e75e",
    "signing_keys": {
        "gpg_public_keys": [
            {
                "key_id": "34365D9472D7468F",
                "ascii_armor": "-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\nZF5q4h4I33PSGDdSvGXn9UMY5Isjpg==\n=7pIB\n-----END PGP PUBLIC KEY BLOCK-----",
                "trust_signature": "",
                "source": "HashiCorp",
                "source_url": "https://www.hashicorp.com/security.html"
            }
        ]
    }
}

using Azure.Storage.Blobs.Models;
using Azure.Storage.Blobs;
using Azure;
using Markdig.Helpers;
using RoyalLondon.TerraformRegistry.Api.src.Models;
using System;
using System.IO;

namespace RoyalLondon.TerraformRegistry.Api.src.Models
{
    public class ProviderService
    {
        private readonly IProviderRepository _providerRepository;

        public ProviderService(IProviderRepository providerRepository)
        {
            _providerRepository = providerRepository;
        }

        //Creates a JSON response listing all the versions of a specified provider
        public ProviderVersionsJson GetVersionList(string path)
        {

            var versionPathList = _providerRepository.GetPathList(path);

            var versionInfoList = versionPathList
                .Where(path => path.EndsWith(".zip"))
                .Select(path =>
                {
                    var parts = path.Split('/');
                    return new VersionInfo
                    {
                        Version = parts[4],
                        OS = parts[5],
                        Arch = parts[6],
                    };
                })
                .Distinct()
                .ToList();

            var groupedVersions = versionInfoList
                .GroupBy(info => info.Version)
                .Select(group => new ProviderVersion
                {
                    version = group.Key,
                    protocols = _providerRepository.GetBlobMetadata(path),
                    platforms = group.Select(info => new ProviderPlatform
                    {
                        os = info.OS,
                        arch = info.Arch
                    }).ToList()
                })
                .ToList();

            var json = new ProviderVersionsJson
            {
                providers = new List<Provider> { new Provider { versions = groupedVersions } }
            };

            return json;
        }

                
        public ProviderPackageJson GetProviderPackage(string path)
        {
            var groupedpackageVersions = _providerRepository.GetPathList(path);
            var json = new ProviderPackageJson
            {
                packages = new List<Package> { new Package {  } }
            };

            return json;
        }

        public async Task<string> GetDownloadUriAsync(string path)
        {
            var sasUri = await _providerRepository.GetSasUriAsync();
            var uriString = sasUri.ToString().Split("?");
            uriString[0] += path + "?";
            sasUri = new Uri(uriString[0] + uriString[1]); //Adds provider location to the sas uri

            return sasUri.ToString();
        }

        //Creates a list of namespaces, modules, providers, or versions depending on user input from the GUI
        public List<string> GetProviderData(string path)
        {
            var pathList = _providerRepository.GetPathList(path);
            List<string> unique = new List<string>();
            int start = path.Length;
            foreach (var blob in pathList)
            {
                int total = blob.Length;
                string stringBack = blob[start..total];
                int end = stringBack.IndexOf('/');
                if (end > 0)
                {
                    string word = stringBack[0..end];
                    unique.Add(word);
                }
            }
            return unique.Distinct().ToList();
        }

        public string GetReadMeContent(string filepath)
        {
            return _providerRepository.GetReadMeContent(filepath);
        }
    }
}

namespace RoyalLondon.TerraformRegistry.Api.src.Models
{

    public class ProviderVersion
    {
        public string version { get; set; }
        public IDictionary<string, string> protocols { get; set; }
        public List<ProviderPlatform> platforms { get; set; }
    }

    public class Provider
    {
        public IList<ProviderVersion> versions { get; set; }
    }

    public class ProviderVersionsJson
    {
        public IList<Provider> providers { get; set; }
    }

    public class ProviderPlatform
    {
        public string os { get; set; }
        public string arch { get; set; }
    }

    public class VersionInfo
    {
        public string Version { get; set; }
        public string OS { get; set; }
        public string Arch { get; set; }
    }


    public class ProviderPackageJson
    {
        public IList<Package> packages { get; set; }
    }

    public class Package
    {
        public IList<ProviderPackage> packageversions { get; set; }
    }
    public class ProviderPackage
    {
        public List<string> Protocols { get; set; }
        public string Os { get; set; }
        public string Arch { get; set; }
        public string Filename { get; set; }
        public string DownloadUrl { get; set; }
        public string ShasumsUrl { get; set; }
        public string ShasumsSignatureUrl { get; set; }
        public string Shasum { get; set; }
        public SigningKeys SigningKeys { get; set; }
    }

    public class SigningKeys
    {
        public List<GpgPublicKey> GpgPublicKeys { get; set; }
    }

    public class GpgPublicKey
    {
        public string KeyId { get; set; }
        public string AsciiArmor { get; set; }
        public string TrustSignature { get; set; }
        public string Source { get; set; }
        public string SourceUrl { get; set; }
    }
}




















Add a smoke test which uploads a provider to the TF registry and then successfully does a `terraform init` which downloads that provider from the Terraform Registry.
https://hugomartins.io/essays/2021/01/build-a-terraform-private-registry/

https://releases.hashicorp.com/terraform-provider-azurerm/3.75.0/terraform-provider-azurerm_3.75.0_windows_amd64.zip

param (
    [Parameter(Mandatory)]
    [string] $StorageAccountName,
    [Parameter(Mandatory)]
    [string] $ContainerName,
    [Parameter(Mandatory)]
    [string] $TerraformRegistryFqdn
)

Describe "Terraform Registry API" {
    It "'terraform init' should return an exit code of 0 (successful)" {
        # Arrange

        # 1. Zip the test module - it's important that we use GNU zip as this is what's
        # used in the module release pipeline; we've seen funny behaviour from the Compress-Archive cmdlet
        # zip terraform-provider-azurerm_3.75.0_windows_amd64.zip "test-provider/main.tf"
        # Define the URL and the destination path
        $url = "https://releases.hashicorp.com/terraform-provider-azurerm/3.75.0/terraform-provider-azurerm_3.75.0_windows_amd64.zip"
        $destinationPath = Join-Path -Path $PSScriptRoot -ChildPath "test-provider\terraform-provider-azurerm_3.75.0_windows_amd64.zip"

        # Create the destination directory if it doesn't exist
        #$destinationDirectory = Split-Path $destinationPath
        #New-Item -ItemType Directory -Force -Path $destinationDirectory

        # Download the file
        Invoke-WebRequest -Uri $url -OutFile $destinationPath

        # 2. Upload the test module zip to the TF registry storage account
        $context = New-AzStorageContext -StorageAccountName $StorageAccountName
        $blobName = "v1/providers/royallondon/azurerm/3.75.0/download/windows/amd64/terraform-provider-azurerm_3.75.0_windows_amd64.zip"
        Set-AzStorageBlobContent `
            -Container $ContainerName `
            -File "terraform-provider-azurerm_3.75.0_windows_amd64.zip" `
            -Blob $blobName `
            -Context $context `
            -Force

        # 3. Substitute placeholder token with TF registry URL in the consuming main.tf
        $testHarnessMainFilePath = "test-provider/main.tf"
        (Get-Content -Raw $testHarnessMainFilePath) -replace "TERRAFORM_REGISTRY_FQDN", $TerraformRegistryFqdn | Set-Content $testHarnessMainFilePath

        # Act
        terraform -chdir=test-provider init -input=false -backend=false
        $terraformInitExitCode = $LASTEXITCODE

        # Assert
        $terraformInitExitCode | Should -Be 0 -Because "'terraform init' should succeed"

        # Teardown
        Remove-AzStorageBlob -Container $ContainerName -Blob $blobName -Context $context
    }
}





using System;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

[Route("v1/providers")]
public class ProviderController : Controller
{
    [HttpGet("{namespace}/{name}/{version}/download/{os}/{arch}")]
    public IActionResult DownloadPackage(string @namespace, string name, string version, string os, string arch)
    {
        string filepath = $"providers/{@namespace}/{name}.json";
        
        if (!System.IO.File.Exists(filepath))
        {
            return NotFound();
        }

        string jsonContent = System.IO.File.ReadAllText(filepath);
        var data = JsonConvert.DeserializeObject<ProviderData>(jsonContent);
        
        ProviderInfo provider = null;

        foreach (var elem in data.Versions)
        {
            if (elem.Version == version)
            {
                foreach (var platform in elem.Platforms)
                {
                    if (platform.OS == os && platform.Arch == arch)
                    {
                        provider = platform;
                        provider.Protocols = elem.Protocols;
                    }
                }
            }
        }

        if (provider == null)
        {
            return NotFound();
        }

        return Json(provider);
    }
}

public class ProviderData
{
    public List<ProviderVersion> Versions { get; set; }
}

public class ProviderVersion
{
    public string Version { get; set; }
    public List<ProviderPlatform> Platforms { get; set; }
    public List<string> Protocols { get; set; }
}

public class ProviderPlatform
{
    public string OS { get; set; }
    public string Arch { get; set; }
    // Add any other properties you need here
}

-------------------------------

 [HttpGet("v1/Providers/{nameSpace}/{type}/versions")]
 public ProviderVersionsJson GetVersionList(string nameSpace, string type)
 {
     Response.ContentType = "application/json";
     return _providerService.GetVersionList($"v1/providers/{nameSpace}/{type}/");
 }
--------------------------------

namespace TerraformRegistry.Api.src.Models
{
    public class ProviderVersion
    {
        public string version { get; set; }
        public List<ProviderPlatform> Platforms { get; set; }
        public List<string> Protocols { get; set; }
    }

    public class Provider
    {
        public IList<ProviderVersion> versions { get; set; }
    }

    public class ProviderVersionsJson
    {
        public IList<Provider> providers { get; set; }
    }
    public class ProviderPlatform
    {
        public string OS { get; set; }
        public string Arch { get; set; }
       
    }
}

------------

        public ProviderVersionsJson GetVersionList(string path)
        {
            var versionPathList = _providerRepository.GetPathList(path);

            var provider = new Provider();
            provider.versions = new List<ProviderVersion>();
            HashSet<string> uniqueSet = new HashSet<string>();

            foreach (var versionPath in versionPathList)
            {
                if (versionPath.EndsWith(".zip"))
                {
                    var version = new ProviderVersion();
                    version.version = versionPath.Split("/")[4];
                                      
                    if (uniqueSet.Add(version.version))
                    {
                       
                        provider.versions.Add(version);
                    }


                }
               
                /* commented
                foreach (var elem in provider.versions)
                {
                   // if (elem.Version == version)
                    //{
                        foreach (var platform in elem.Platforms)
                        {
                            if (platform.OS == os && platform.Arch == arch)
                            {
                                provider = platform;
                                provider.Protocols = elem.Protocols;
                            }
                        }
                    }
                }

                */
            }



            var json = new ProviderVersionsJson();
            json.providers = new List<Provider> { provider };

            return json;
        }

File paths:
v1/providers/namespace/azurerm/3.75.0/windows/amd64/local.zip
v1/providers/namespace/azurerm/3.75.0/freebsd/386/local.zip
v1/providers/namespace/azurerm/3.75.0/linux/arm/local.zip
v1/providers/namespace/azurerm/3.76.0/darwin/arm64/local.zip
v1/providers/namespace/azurerm/3.76.0/windows/amd64/local.zip


Jason Output:
{
  "versions": [
    {
      "version": "3.75.0",
      "protocols": [null, null],
      "platforms": [
        {"os": "darwin", "arch": "amd64"},
        {"os": "linux", "arch": "arm"},
        {"os": "windows", "arch": "amd64"}
      ]
    },
    {
      "version": "3.76.0",
      "protocols": [null],
      "platforms": [
        {"os": "darwin", "arch": "amd64"},
       {"os": "windows", "arch": "amd64"}
      ]
    }
  ]
}


namespace RoyalLondon.TerraformRegistry.Api.src.Models
{
    public class AzureStorageProviderRepository : IProviderRepository
    {
        private readonly BlobServiceClient _blobServiceClient;
        private readonly IConfiguration _configuration;
        private readonly MarkdownPipeline markdownPipeline;
        private string ContainerName
        {
            get => _configuration["AZCONTAINER"] ?? throw new ConfigurationNotFoundException("AZCONTAINER");
        }

        public AzureStorageProviderRepository(BlobServiceClient blobServiceClient, IConfiguration configuration)
        {
            _blobServiceClient = blobServiceClient;
            _configuration = configuration;
            markdownPipeline = new MarkdownPipelineBuilder().UsePipeTables().UseAdvancedExtensions().Build();
        }

        //Returns a list of paths from a blob container that begin with the subPath
        public List<string> GetPathList(string subPath)
        {
            List<string> pathList = new List<string>();
            var paths = _blobServiceClient.GetBlobContainerClient(ContainerName).GetBlobs(BlobTraits.None, BlobStates.None, subPath);
            foreach (var path in paths) //Coverting Pageable<BlobItem> to List<string>
            {
                pathList.Add(path.Name);
            }

            return pathList;
        }

        //Returns a uri with a SAS token to allow downloading from the blob container
        public async Task<Uri> GetSasUriAsync()
        {
            var blobClient = _blobServiceClient.GetBlobContainerClient(ContainerName);
            var userDelegationKey = await _blobServiceClient.GetUserDelegationKeyAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow.AddMinutes(5));
            BlobSasBuilder sasBuilder = new BlobSasBuilder()
            {
                BlobContainerName = ContainerName,
                Resource = "b", //resource is a blob
                StartsOn = DateTimeOffset.UtcNow,
                ExpiresOn = DateTimeOffset.UtcNow.AddMinutes(5),
            };

            sasBuilder.SetPermissions(BlobSasPermissions.Read);

            BlobUriBuilder uriBuilder = new BlobUriBuilder(blobClient.Uri)
            {
                Sas = sasBuilder.ToSasQueryParameters(userDelegationKey, blobClient.GetParentBlobServiceClient().AccountName)
            };

            return uriBuilder.ToUri();
        }

        //Returns content from a readme file and converts it from markdown to html
        public string GetReadMeContent(string filepath)
        {
            var blobClient = _blobServiceClient.GetBlobContainerClient(ContainerName).GetBlobClient(filepath);
            var data = "<p style='color: red;'>No readme file found for this version.</p>";//html to be displayed if no readme file found
            try
            {
                data = Markdown.ToHtml(blobClient.DownloadContent().Value.Content.ToString(), markdownPipeline);
            }
            catch (RequestFailedException rfe)
            {
                Console.Error.WriteLine($"{filepath} - {rfe.Message}");
                data = $"{filepath} - {rfe.Message}";
            }
            return data;
        }
    }
}

public ProviderVersionsJson GetVersionList(string path)
{

    var versionPathList = _providerRepository.GetPathList(path);

    var versionInfoList = versionPathList
        .Where(path => path.EndsWith(".zip"))
        .Select(path =>
        {
            var parts = path.Split('/');
            return new VersionInfo
            {
                Version = parts[4],
                OS = parts[5],
                Arch = parts[6],
            };
        })
        .Distinct()
        .ToList();

    var groupedVersions = versionInfoList
        .GroupBy(info => info.Version)
        .Select(group => new ProviderVersion
        {
            version = group.Key,
            protocols = new List<string> { null }, 
            platforms = group.Select(info => new ProviderPlatform
            {
                os = info.OS,
                arch = info.Arch
            }).ToList()
        })
        .ToList();

    var json = new ProviderVersionsJson
    {
        providers = new List<Provider> { new Provider { versions = groupedVersions } }
    };

    return json;
}

https://developer.hashicorp.com/terraform/internals/provider-registry-protocol#find-a-provider-package
