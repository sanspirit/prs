Add a smoke test which uploads a provider to the TF registry and then successfully does a `terraform init` which downloads that provider from the Terraform Registry.
https://hugomartins.io/essays/2021/01/build-a-terraform-private-registry/

https://releases.hashicorp.com/terraform-provider-azurerm/3.75.0/terraform-provider-azurerm_3.75.0_windows_amd64.zip

param (
    [Parameter(Mandatory)]
    [string] $StorageAccountName,
    [Parameter(Mandatory)]
    [string] $ContainerName,
    [Parameter(Mandatory)]
    [string] $TerraformRegistryFqdn
)

Describe "Terraform Registry API" {
    It "'terraform init' should return an exit code of 0 (successful)" {
        # Arrange

        # 1. Zip the test module - it's important that we use GNU zip as this is what's
        # used in the module release pipeline; we've seen funny behaviour from the Compress-Archive cmdlet
        # zip terraform-provider-azurerm_3.75.0_windows_amd64.zip "test-provider/main.tf"
        # Define the URL and the destination path
        $url = "https://releases.hashicorp.com/terraform-provider-azurerm/3.75.0/terraform-provider-azurerm_3.75.0_windows_amd64.zip"
        $destinationPath = Join-Path -Path $PSScriptRoot -ChildPath "test-provider\terraform-provider-azurerm_3.75.0_windows_amd64.zip"

        # Create the destination directory if it doesn't exist
        #$destinationDirectory = Split-Path $destinationPath
        #New-Item -ItemType Directory -Force -Path $destinationDirectory

        # Download the file
        Invoke-WebRequest -Uri $url -OutFile $destinationPath

        # 2. Upload the test module zip to the TF registry storage account
        $context = New-AzStorageContext -StorageAccountName $StorageAccountName
        $blobName = "v1/providers/royallondon/azurerm/3.75.0/download/windows/amd64/terraform-provider-azurerm_3.75.0_windows_amd64.zip"
        Set-AzStorageBlobContent `
            -Container $ContainerName `
            -File "terraform-provider-azurerm_3.75.0_windows_amd64.zip" `
            -Blob $blobName `
            -Context $context `
            -Force

        # 3. Substitute placeholder token with TF registry URL in the consuming main.tf
        $testHarnessMainFilePath = "test-provider/main.tf"
        (Get-Content -Raw $testHarnessMainFilePath) -replace "TERRAFORM_REGISTRY_FQDN", $TerraformRegistryFqdn | Set-Content $testHarnessMainFilePath

        # Act
        terraform -chdir=test-provider init -input=false -backend=false
        $terraformInitExitCode = $LASTEXITCODE

        # Assert
        $terraformInitExitCode | Should -Be 0 -Because "'terraform init' should succeed"

        # Teardown
        Remove-AzStorageBlob -Container $ContainerName -Blob $blobName -Context $context
    }
}





using System;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

[Route("v1/providers")]
public class ProviderController : Controller
{
    [HttpGet("{namespace}/{name}/{version}/download/{os}/{arch}")]
    public IActionResult DownloadPackage(string @namespace, string name, string version, string os, string arch)
    {
        string filepath = $"providers/{@namespace}/{name}.json";
        
        if (!System.IO.File.Exists(filepath))
        {
            return NotFound();
        }

        string jsonContent = System.IO.File.ReadAllText(filepath);
        var data = JsonConvert.DeserializeObject<ProviderData>(jsonContent);
        
        ProviderInfo provider = null;

        foreach (var elem in data.Versions)
        {
            if (elem.Version == version)
            {
                foreach (var platform in elem.Platforms)
                {
                    if (platform.OS == os && platform.Arch == arch)
                    {
                        provider = platform;
                        provider.Protocols = elem.Protocols;
                    }
                }
            }
        }

        if (provider == null)
        {
            return NotFound();
        }

        return Json(provider);
    }
}

public class ProviderData
{
    public List<ProviderVersion> Versions { get; set; }
}

public class ProviderVersion
{
    public string Version { get; set; }
    public List<ProviderPlatform> Platforms { get; set; }
    public List<string> Protocols { get; set; }
}

public class ProviderPlatform
{
    public string OS { get; set; }
    public string Arch { get; set; }
    // Add any other properties you need here
}

-------------------------------

 [HttpGet("v1/Providers/{nameSpace}/{type}/versions")]
 public ProviderVersionsJson GetVersionList(string nameSpace, string type)
 {
     Response.ContentType = "application/json";
     return _providerService.GetVersionList($"v1/providers/{nameSpace}/{type}/");
 }
--------------------------------

namespace TerraformRegistry.Api.src.Models
{
    public class ProviderVersion
    {
        public string version { get; set; }
        public List<ProviderPlatform> Platforms { get; set; }
        public List<string> Protocols { get; set; }
    }

    public class Provider
    {
        public IList<ProviderVersion> versions { get; set; }
    }

    public class ProviderVersionsJson
    {
        public IList<Provider> providers { get; set; }
    }
    public class ProviderPlatform
    {
        public string OS { get; set; }
        public string Arch { get; set; }
       
    }
}

------------

        public ProviderVersionsJson GetVersionList(string path)
        {
            var versionPathList = _providerRepository.GetPathList(path);

            var provider = new Provider();
            provider.versions = new List<ProviderVersion>();
            HashSet<string> uniqueSet = new HashSet<string>();

            foreach (var versionPath in versionPathList)
            {
                if (versionPath.EndsWith(".zip"))
                {
                    var version = new ProviderVersion();
                    version.version = versionPath.Split("/")[4];
                                      
                    if (uniqueSet.Add(version.version))
                    {
                       
                        provider.versions.Add(version);
                    }


                }
               
                /* commented
                foreach (var elem in provider.versions)
                {
                   // if (elem.Version == version)
                    //{
                        foreach (var platform in elem.Platforms)
                        {
                            if (platform.OS == os && platform.Arch == arch)
                            {
                                provider = platform;
                                provider.Protocols = elem.Protocols;
                            }
                        }
                    }
                }

                */
            }



            var json = new ProviderVersionsJson();
            json.providers = new List<Provider> { provider };

            return json;
        }

File paths:
v1/providers/namespace/azurerm/3.75.0/windows/amd64/local.zip
v1/providers/namespace/azurerm/3.75.0/freebsd/386/local.zip
v1/providers/namespace/azurerm/3.75.0/linux/arm/local.zip
v1/providers/namespace/azurerm/3.76.0/darwin/arm64/local.zip
v1/providers/namespace/azurerm/3.76.0/windows/amd64/local.zip


Jason Output:
{
  "versions": [
    {
      "version": "3.75.0",
      "protocols": [null, null],
      "platforms": [
        {"os": "darwin", "arch": "amd64"},
        {"os": "linux", "arch": "arm"},
        {"os": "windows", "arch": "amd64"}
      ]
    },
    {
      "version": "3.76.0",
      "protocols": [null],
      "platforms": [
        {"os": "darwin", "arch": "amd64"},
       {"os": "windows", "arch": "amd64"}
      ]
    }
  ]
}


namespace RoyalLondon.TerraformRegistry.Api.src.Models
{
    public class AzureStorageProviderRepository : IProviderRepository
    {
        private readonly BlobServiceClient _blobServiceClient;
        private readonly IConfiguration _configuration;
        private readonly MarkdownPipeline markdownPipeline;
        private string ContainerName
        {
            get => _configuration["AZCONTAINER"] ?? throw new ConfigurationNotFoundException("AZCONTAINER");
        }

        public AzureStorageProviderRepository(BlobServiceClient blobServiceClient, IConfiguration configuration)
        {
            _blobServiceClient = blobServiceClient;
            _configuration = configuration;
            markdownPipeline = new MarkdownPipelineBuilder().UsePipeTables().UseAdvancedExtensions().Build();
        }

        //Returns a list of paths from a blob container that begin with the subPath
        public List<string> GetPathList(string subPath)
        {
            List<string> pathList = new List<string>();
            var paths = _blobServiceClient.GetBlobContainerClient(ContainerName).GetBlobs(BlobTraits.None, BlobStates.None, subPath);
            foreach (var path in paths) //Coverting Pageable<BlobItem> to List<string>
            {
                pathList.Add(path.Name);
            }

            return pathList;
        }

        //Returns a uri with a SAS token to allow downloading from the blob container
        public async Task<Uri> GetSasUriAsync()
        {
            var blobClient = _blobServiceClient.GetBlobContainerClient(ContainerName);
            var userDelegationKey = await _blobServiceClient.GetUserDelegationKeyAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow.AddMinutes(5));
            BlobSasBuilder sasBuilder = new BlobSasBuilder()
            {
                BlobContainerName = ContainerName,
                Resource = "b", //resource is a blob
                StartsOn = DateTimeOffset.UtcNow,
                ExpiresOn = DateTimeOffset.UtcNow.AddMinutes(5),
            };

            sasBuilder.SetPermissions(BlobSasPermissions.Read);

            BlobUriBuilder uriBuilder = new BlobUriBuilder(blobClient.Uri)
            {
                Sas = sasBuilder.ToSasQueryParameters(userDelegationKey, blobClient.GetParentBlobServiceClient().AccountName)
            };

            return uriBuilder.ToUri();
        }

        //Returns content from a readme file and converts it from markdown to html
        public string GetReadMeContent(string filepath)
        {
            var blobClient = _blobServiceClient.GetBlobContainerClient(ContainerName).GetBlobClient(filepath);
            var data = "<p style='color: red;'>No readme file found for this version.</p>";//html to be displayed if no readme file found
            try
            {
                data = Markdown.ToHtml(blobClient.DownloadContent().Value.Content.ToString(), markdownPipeline);
            }
            catch (RequestFailedException rfe)
            {
                Console.Error.WriteLine($"{filepath} - {rfe.Message}");
                data = $"{filepath} - {rfe.Message}";
            }
            return data;
        }
    }
}
